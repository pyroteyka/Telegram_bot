import telebot
from telebot import types
import json
import random
import requests
from bs4 import BeautifulSoup
from config import *

bot = telebot.TeleBot(TOKEN)

# üîπ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∞–π—Ç–∞
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
}

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def load_recipes():
    with open("recipes.json", "r", encoding="utf-8") as file:
        data = json.load(file)
    return data["recipes"]

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_recipes_from_category(category_url):
    try:
        response = requests.get(category_url, headers=HEADERS, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")
        links = soup.find_all("a", href=True)

        recipe_links = []
        for link in links:
            href = link["href"]
            if href.startswith("/recepty/") and len(href) > 20:
                full_url = "https://eda.ru" + href
                recipe_links.append(full_url)

        return list(set(recipe_links))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        return []

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ
def get_recipe_details(recipe_url):
    try:
        response = requests.get(recipe_url, headers=HEADERS, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        name = soup.find("h1").get_text(strip=True)
        ingredients = [item.get_text(strip=True) for item in soup.find_all("span", class_="emotion-15im4d2")]
        instructions = " ".join([step.get_text(strip=True) for step in soup.find_all("p", class_="emotion-19d62wq")])

        return {
            "name": name,
            "url": recipe_url,
            "ingredients": ingredients,
            "instructions": instructions
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        return None

# üîπ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    recipes = load_recipes()

    for recipe in recipes:
        markup.add(types.KeyboardButton(recipe["name"]))

    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–∞:", reply_markup=markup)

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(content_types=['text'])
def handle_text(message):
    categories = load_recipes()
    selected = next((cat for cat in categories if cat["name"] == message.text), None)

    if not selected:
        bot.send_message(message.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    recipe_links = get_recipes_from_category(selected["url"])
    if not recipe_links:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    chosen_url = random.choice(recipe_links)
    recipe = get_recipe_details(chosen_url)

    if not recipe:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # üîπ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    recipe_text = f"üçΩ *{recipe['name']}*\n\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç]({recipe['url']})\n\nüç¥ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
    recipe_text += "\n".join([f"- {ing}" for ing in recipe["ingredients"]])
    recipe_text += f"\n\nüë®‚Äçüç≥ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:*\n{recipe['instructions']}"

    bot.send_message(message.chat.id, recipe_text, parse_mode="Markdown", disable_web_page_preview=True)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)